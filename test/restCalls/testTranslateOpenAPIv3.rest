POST http://localhost:3334/translateOpenApi/url
Content-Type: application/json

{
  "url": "http://webservices.ingv.it/fdsnws/station/1/swagger.json"
}
####
POST http://localhost:3334/translateOpenApi
Content-Type: application/json

{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Petstore - OpenAPI 3.0",
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": { "email": "apiteam@swagger.io" },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.6"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [{ "url": "/api/v3" }],
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    { "name": "store", "description": "Operations about user" },
    {
      "name": "user",
      "description": "Access to Petstore orders",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/pet": {
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "description": "Update an existing pet by Id",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" },
          "405": { "description": "Validation exception" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "post": {
        "tags": ["pet"],
        "summary": "Add a new pet to the store",
        "description": "Add a new pet to the store",
        "operationId": "addPet",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "405": { "description": "Invalid input" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": "available",
              "enum": ["available", "pending", "sold"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              }
            }
          },
          "400": { "description": "Invalid status value" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": false,
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              }
            }
          },
          "400": { "description": "Invalid tag value" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" }
        },
        "security": [
          { "api_key": [] },
          { "petstore_auth": ["write:pets", "read:pets"] }
        ]
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of pet that needs to be updated",
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of pet that needs to be updated",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "405": { "description": "Invalid input" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": { "400": { "description": "Invalid pet value" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "additionalMetadata",
            "in": "query",
            "description": "Additional Metadata",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": { "type": "string", "format": "binary" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponse" }
              }
            }
          }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet",
        "description": "Place a new order in the store",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Order" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/Order" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Order" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "405": { "description": "Invalid input" }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order that needs to be fetched",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Order" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" }
        }
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/User" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              },
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/User" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "default": { "description": "successful operation" }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": { "type": "integer", "format": "int32" }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": { "type": "string", "format": "date-time" }
              }
            },
            "content": {
              "application/xml": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "description": "Invalid username/password supplied" }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": { "default": { "description": "successful operation" } }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/User" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": { "description": "Invalid username supplied" },
          "404": { "description": "User not found" }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/User" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": { "default": { "description": "successful operation" } }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "400": { "description": "Invalid username supplied" },
          "404": { "description": "User not found" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "petId": { "type": "integer", "format": "int64", "example": 198772 },
          "quantity": { "type": "integer", "format": "int32", "example": 7 },
          "shipDate": { "type": "string", "format": "date-time" },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": { "type": "boolean" }
        },
        "xml": { "name": "order" }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 100000 },
          "username": { "type": "string", "example": "fehguy" },
          "address": {
            "type": "array",
            "xml": { "name": "addresses", "wrapped": true },
            "items": { "$ref": "#/components/schemas/Address" }
          }
        },
        "xml": { "name": "customer" }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": { "type": "string", "example": "437 Lytton" },
          "city": { "type": "string", "example": "Palo Alto" },
          "state": { "type": "string", "example": "CA" },
          "zip": { "type": "string", "example": "94301" }
        },
        "xml": { "name": "address" }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 1 },
          "name": { "type": "string", "example": "Dogs" }
        },
        "xml": { "name": "category" }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "username": { "type": "string", "example": "theUser" },
          "firstName": { "type": "string", "example": "John" },
          "lastName": { "type": "string", "example": "James" },
          "email": { "type": "string", "example": "john@email.com" },
          "password": { "type": "string", "example": "12345" },
          "phone": { "type": "string", "example": "12345" },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": { "name": "user" }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "name": { "type": "string" }
        },
        "xml": { "name": "tag" }
      },
      "Pet": {
        "required": ["name", "photoUrls"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "name": { "type": "string", "example": "doggie" },
          "category": { "$ref": "#/components/schemas/Category" },
          "photoUrls": {
            "type": "array",
            "xml": { "wrapped": true },
            "items": { "type": "string", "xml": { "name": "photoUrl" } }
          },
          "tags": {
            "type": "array",
            "xml": { "wrapped": true },
            "items": { "$ref": "#/components/schemas/Tag" }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": { "name": "pet" }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": { "type": "integer", "format": "int32" },
          "type": { "type": "string" },
          "message": { "type": "string" }
        },
        "xml": { "name": "##default" }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Pet" }
          },
          "application/xml": {
            "schema": { "$ref": "#/components/schemas/Pet" }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/User" }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": { "type": "apiKey", "name": "api_key", "in": "header" }
    }
  }
}

####
POST http://localhost:3334/deployWoT
Content-Type: application/json

{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Petstore - OpenAPI 3.0",
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": { "email": "apiteam@swagger.io" },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.6"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [{ "url": "https://petstore3.swagger.io/api/v3" }],
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    { "name": "store", "description": "Operations about user" },
    {
      "name": "user",
      "description": "Access to Petstore orders",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/pet": {
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "description": "Update an existing pet by Id",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" },
          "405": { "description": "Validation exception" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "post": {
        "tags": ["pet"],
        "summary": "Add a new pet to the store",
        "description": "Add a new pet to the store",
        "operationId": "addPet",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "405": { "description": "Invalid input" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": "available",
              "enum": ["available", "pending", "sold"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              }
            }
          },
          "400": { "description": "Invalid status value" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": false,
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              }
            }
          },
          "400": { "description": "Invalid tag value" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" }
        },
        "security": [
          { "api_key": [] },
          { "petstore_auth": ["write:pets", "read:pets"] }
        ]
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of pet that needs to be updated",
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of pet that needs to be updated",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "405": { "description": "Invalid input" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": { "400": { "description": "Invalid pet value" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "additionalMetadata",
            "in": "query",
            "description": "Additional Metadata",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": { "type": "string", "format": "binary" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponse" }
              }
            }
          }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet",
        "description": "Place a new order in the store",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Order" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/Order" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Order" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "405": { "description": "Invalid input" }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order that needs to be fetched",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Order" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" }
        }
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/User" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              },
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/User" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "default": { "description": "successful operation" }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": { "type": "integer", "format": "int32" }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": { "type": "string", "format": "date-time" }
              }
            },
            "content": {
              "application/xml": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "description": "Invalid username/password supplied" }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": { "default": { "description": "successful operation" } }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/User" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": { "description": "Invalid username supplied" },
          "404": { "description": "User not found" }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/User" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": { "default": { "description": "successful operation" } }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "400": { "description": "Invalid username supplied" },
          "404": { "description": "User not found" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "petId": { "type": "integer", "format": "int64", "example": 198772 },
          "quantity": { "type": "integer", "format": "int32", "example": 7 },
          "shipDate": { "type": "string", "format": "date-time" },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": { "type": "boolean" }
        },
        "xml": { "name": "order" }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 100000 },
          "username": { "type": "string", "example": "fehguy" },
          "address": {
            "type": "array",
            "xml": { "name": "addresses", "wrapped": true },
            "items": { "$ref": "#/components/schemas/Address" }
          }
        },
        "xml": { "name": "customer" }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": { "type": "string", "example": "437 Lytton" },
          "city": { "type": "string", "example": "Palo Alto" },
          "state": { "type": "string", "example": "CA" },
          "zip": { "type": "string", "example": "94301" }
        },
        "xml": { "name": "address" }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 1 },
          "name": { "type": "string", "example": "Dogs" }
        },
        "xml": { "name": "category" }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "username": { "type": "string", "example": "theUser" },
          "firstName": { "type": "string", "example": "John" },
          "lastName": { "type": "string", "example": "James" },
          "email": { "type": "string", "example": "john@email.com" },
          "password": { "type": "string", "example": "12345" },
          "phone": { "type": "string", "example": "12345" },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": { "name": "user" }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "name": { "type": "string" }
        },
        "xml": { "name": "tag" }
      },
      "Pet": {
        "required": ["name", "photoUrls"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "name": { "type": "string", "example": "doggie" },
          "category": { "$ref": "#/components/schemas/Category" },
          "photoUrls": {
            "type": "array",
            "xml": { "wrapped": true },
            "items": { "type": "string", "xml": { "name": "photoUrl" } }
          },
          "tags": {
            "type": "array",
            "xml": { "wrapped": true },
            "items": { "$ref": "#/components/schemas/Tag" }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": { "name": "pet" }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": { "type": "integer", "format": "int32" },
          "type": { "type": "string" },
          "message": { "type": "string" }
        },
        "xml": { "name": "##default" }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Pet" }
          },
          "application/xml": {
            "schema": { "$ref": "#/components/schemas/Pet" }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/User" }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": { "type": "apiKey", "name": "api_key", "in": "header" }
    }
  }
}

####
POST http://localhost:3334/translateOpenApi
Content-Type: application/json

{
	"swagger": "2.0",
	"info": {
		"title": "INGV CNT FDSNWS station Web Service Documentation",
		"description": "\n\nThe **fdsnws-station** web service returns station metadata in [FDSN StationXML](http://www.fdsn.org/xml/station/) format ([schema here](http://www.fdsn.org/xml/station/fdsn-station-1.1.xsd)) or as delimited text.\nThe purpose of the FDSN StationXML schema is to define an XML representation of the most important and commonly used structures of SEED 2.4 metadata.\nResults are available at multiple levels of granularity: **network**, **station**, **channel** and **response**.\n\nMetadata may be selected based on channel descriptors, time ranges, geographic regions, and more.\n\nThis service is an implementation of the [FDSN web service specification version 1.1](http://www.fdsn.org/webservices/FDSN-WS-Specifications-1.1.pdf)\n\n Optional parameters 'includeavailability', 'updatedafter' and 'matchtimeseries' are not implemented yet. \n\nBelow is a full list of service parameters and their usage.\n\n# Query Usage\n\nTo retrieve data from the station service, submit a request by either of the methods below:\n\n  - _via HTTP GET_: Provide a series of parameter-value pairs in the URL that specify the start-time and end-time, along with the desired network(s), station(s), location(s) and channel(s). Please refer to the table below titled \"Detailed Descriptions of each Query Parameter\" for usage details. Each parameter-value pair should be separated by an ampersand **&**, and with no space. A GET request may take the following general form:\n\n  ``\n/query? [channel-options] [time-constraints] [geographic-constraints] [miscellaneous] [nodata=404]\n``\n\n  - _via HTTP POST_: Submit an arbitrary selection list to the service. Please note that all parameters used for GET queries are also valid for POST queries with the following exceptions: *startbefore*, *endbefore*, *startafter*, *endafter*. For the POST method, all parameters must be submitted as part of the POST body. The parameters for network, station, location, channel, starttime and endtime may be repeated as many times as necessary, all other parameters should be specified as key=value pairs on separate lines following this pattern:\n\n ```\nparameter1=value\nparameter2=value\nNET STA LOC CHA STARTTIME ENDTIME\nNET STA LOC CHA STARTTIME ENDTIME\nNET STA LOC CHA STARTTIME ENDTIME\n``` \n\n  - *via web service clients*: Dedicated clients that use the fdsnws-station service can be found on the [http://service.iris.edu/clients/](IRIS DMC Client list page). In particular, the FetchMetadata script will request metadata from fdsnws-station, parse the returned XML and print or save simple ASCII information; this script can be used as a starting point for creating customized metadata requests.\n\n\n Find out more about FDSN Web Service Specifications http://www.fdsn.org/webservices/\n ",
		"termsOfService": "http://www.fdsn.org/webservices/",
		"contact": {
			"email": "matteo.quintiliani@ingv.it"
		},
		"license": {
			"name": "Creative Commons Attribution 4.0 International",
			"url": "http://creativecommons.org/licenses/by/4.0/"
		},
		"version": "1.1.48.1"
	},
	"host": "webservices.ingv.it",
	"basePath": "/fdsnws/station/1",
	"schemes": [
		"http"
	],
	"paths": {
		"/query": {
			"get": {
				"tags": [
					"fdsnws-station-1.1"
				],
				"summary": "Get StationXML",
				"description": "Returns a StationXML message with the following schema http://www.fdsn.org/xml/station/fdsn-station-1.1.xsd",
				"produces": [
					"application/xml",
					"text/plain"
				],
				"parameters": [
					{
						"name": "starttime",
						"in": "query",
						"description": "Limit to channels that are active on or after the specified start time.",
						"required": false,
						"type": "string",
						"format": "date-time",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "endtime",
						"in": "query",
						"description": "Limit to channels that are active on or before the specified end time.",
						"required": false,
						"type": "string",
						"format": "date-time",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "startbefore",
						"in": "query",
						"description": "Limit to stations starting before the specified time.",
						"required": false,
						"type": "string",
						"format": "date-time",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "startafter",
						"in": "query",
						"description": "Limit to stations starting after the specified time.",
						"required": false,
						"type": "string",
						"format": "date-time",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "endbefore",
						"in": "query",
						"description": "Limit to stations ending before the specified time.",
						"required": false,
						"type": "string",
						"format": "date-time",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "endafter",
						"in": "query",
						"description": "Limit to stations ending after the specified time.",
						"required": false,
						"type": "string",
						"format": "date-time",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "network",
						"in": "query",
						"description": "Select one or more network or virtual network codes. Lists and wildcards are accepted.",
						"required": false,
						"type": "string",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "station",
						"in": "query",
						"description": "Select one or more SEED station codes. Lists and wildcards are accepted.",
						"required": false,
						"type": "string",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "channel",
						"in": "query",
						"description": "Select one or more SEED channel codes. Lists and wildcards are accepted.",
						"required": false,
						"type": "string",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "location",
						"in": "query",
						"description": "Select one or more SEED location codes. Use -- for spaces. Lists and wildcards are accepted.",
						"required": false,
						"type": "string",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "minlatitude",
						"in": "query",
						"description": "Specify southern boundary for search.",
						"required": false,
						"type": "number",
						"format": "double",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "maxlatitude",
						"in": "query",
						"description": "Specify northern boundary for search.",
						"required": false,
						"type": "number",
						"format": "double",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "minlongitude",
						"in": "query",
						"description": "Specify western boundary for search.",
						"required": false,
						"type": "number",
						"format": "double",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "maxlongitude",
						"in": "query",
						"description": "Specify eastern boundary for search.",
						"required": false,
						"type": "number",
						"format": "double",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "Specify the central latitude point for a radial search.",
						"required": false,
						"type": "number",
						"format": "double",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "Specify the central longitude point for a radial search.",
						"required": false,
						"type": "number",
						"format": "double",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "minradius",
						"in": "query",
						"description": "Specify minimum distance from the geographic point defined by latitude and longitude. Degrees.",
						"required": false,
						"type": "number",
						"format": "double",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "maxradius",
						"in": "query",
						"description": "Specify maximum distance from the geographic point defined by latitude and longitude. Degrees.",
						"required": false,
						"type": "number",
						"format": "double",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "minradiuskm",
						"in": "query",
						"description": "Specify minimum distance from the geographic point defined by latitude and longitude. Kilometers. **This is an INGV extension to the FDSN specification.**",
						"required": false,
						"type": "number",
						"format": "double",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "maxradiuskm",
						"in": "query",
						"description": "Specify maximum distance from the geographic point defined by latitude and longitude. Kilometers. **This is an INGV extension to the FDSN specification.**",
						"required": false,
						"type": "number",
						"format": "double",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "level",
						"in": "query",
						"description": "Specify the level of detail that is returned.",
						"required": false,
						"type": "string",
						"items": {
							"type": "string"
						},
						"default": "station",
						"enum": [
							"network",
							"station",
							"channel",
							"response"
						]
					},
					{
						"name": "includerestricted",
						"in": "query",
						"description": "Specify if results should include information for restricted stations.",
						"required": false,
						"type": "boolean",
						"items": {
							"type": "boolean"
						},
						"default": true
					},
					{
						"name": "format",
						"in": "query",
						"description": "Specify output format. Format *geojson* works only for level *station*, *channel* or *response* and always returns station coordinates. **This is an INGV extension to the FDSN specification.**",
						"required": false,
						"type": "string",
						"items": {
							"type": "string"
						},
						"default": "xml",
						"enum": [
							"xml",
							"text",
							"json",
							"geojson"
						]
					},
					{
						"name": "formatted",
						"in": "query",
						"description": "Specify output must be formatted. **This is an INGV extension to the FDSN specification.**",
						"required": false,
						"type": "boolean",
						"items": {
							"type": "boolean"
						},
						"default": false
					},
					{
						"name": "nodata",
						"in": "query",
						"description": "Specify which HTML Status code is returned when no data is found. **This is an INGV extension to the FDSN specification.**",
						"required": false,
						"type": "integer",
						"items": {
							"type": "integer"
						},
						"default": 204,
						"enum": [
							204,
							404
						]
					},
					{
						"name": "visibility",
						"in": "query",
						"description": "If it is 'only', service shows only information with visibility set to true. If it is 'no', shows only information with visibility set to false. If it is 'any', shows everything. **This is an INGV extension to the FDSN specification.**",
						"required": false,
						"type": "string",
						"items": {
							"type": "string"
						},
						"default": "only",
						"enum": [
							"any",
							"only",
							"no"
						]
					},
					{
						"name": "authoritative",
						"in": "query",
						"description": "If it is 'only', service shows only information with authoritative set to true. If it is 'no', shows only not authoritative. If it is 'any', shows everything. **This is an INGV extension to the FDSN specification.**",
						"required": false,
						"type": "string",
						"items": {
							"type": "string"
						},
						"default": "only",
						"enum": [
							"any",
							"only",
							"no"
						]
					}
				],
				"responses": {
					"200": {
						"description": "Successful request, results follow",
						"schema": {
							"$ref": "#/definitions/StationXMLResponse"
						}
					},
					"204": {
						"description": "Request was properly formatted and submitted but no data matches the selection",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"400": {
						"description": "Bad request due to improper specification, unrecognized parameter, parameter value out of range, etc.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"401": {
						"description": "Unauthorized, authentication required",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"description": "Authentication failed or access blocked to restricted data",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"description": "Alternate to 204 (set via the 'nodata' parameter), normally used for results returned to a web browser.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"413": {
						"description": "Request would result in too much data being returned or the request itself is too large returned error message should include the service limitations in the detailed description. Service limits should also be documented in the service WADL.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"414": {
						"description": "Request URI too large",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"503": {
						"description": "Service temporarily unavailable, used in maintenance and error conditions",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"default": {
						"description": ""
					}
				}
			},
			"post": {
				"tags": [
					"fdsnws-station-1.1"
				],
				"summary": "Get StationXML",
				"description": "Returns a StationXML message with the following schema http://www.fdsn.org/xml/station/fdsn-station-1.1.xsd",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"application/xml",
					"text/plain"
				],
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Please note that all parameters used for GET queries are also valid for POST queries with the following exceptions: *startbefore*, *endbefore*, *startafter*, *endafter*. For the POST method, all parameters must be submitted as part of the POST body. The parameters for network, station, location, channel, starttime and endtime may be repeated as many times as necessary, all other parameters should be specified as key=value pairs on separate lines following this pattern:\n\n ```\nparameter1=value\nparameter2=value\nNET STA LOC CHA STARTTIME ENDTIME\nNET STA LOC CHA STARTTIME ENDTIME\nNET STA LOC CHA STARTTIME ENDTIME\n```",
						"required": true,
						"schema": {
							"$ref": "#/definitions/BodyRequestContent"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful request, results follow",
						"schema": {
							"$ref": "#/definitions/StationXMLResponse"
						}
					},
					"204": {
						"description": "Request was properly formatted and submitted but no data matches the selection",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"400": {
						"description": "Bad request due to improper specification, unrecognized parameter, parameter value out of range, etc.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"401": {
						"description": "Unauthorized, authentication required",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"description": "Authentication failed or access blocked to restricted data",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"description": "Alternate to 204 (set via the 'nodata' parameter), normally used for results returned to a web browser.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"413": {
						"description": "Request would result in too much data being returned or the request itself is too large returned error message should include the service limitations in the detailed description. Service limits should also be documented in the service WADL.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"414": {
						"description": "Request URI too large",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"429": {
						"description": "Too Many Requests",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"503": {
						"description": "Service temporarily unavailable, used in maintenance and error conditions",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"default": {
						"description": ""
					}
				}
			}
		},
		"/version": {
			"get": {
				"tags": [
					"fdsnws-station-1.1"
				],
				"summary": "Get StationXML version",
				"description": "Returns a string containing StationXML version",
				"produces": [
					"text/plain"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/VersionResponse"
						}
					}
				}
			}
		},
		"/application.wadl": {
			"get": {
				"tags": [
					"fdsnws-station-1.1"
				],
				"summary": "Get application.wadl",
				"description": "Returns application.wadl file content",
				"produces": [
					"application/xml"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "object",
							"additionalProperties": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				}
			}
		},
		"/swagger.json": {
			"get": {
				"tags": [
					"fdsnws-station-1.1-ingv-extension"
				],
				"summary": "Get swagger.json",
				"description": "Returns swagger.json file content. **This is an INGV extension to the FDSN specification.**",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/schemas/v2.0/schema.json"
						}
					}
				}
			}
		},
		"/test": {
			"get": {
				"tags": [
					"fdsnws-station-1.1-ingv-extension"
				],
				"summary": "Returns a json message containing 'test'",
				"description": "Returns a json message for testing service. **This is an INGV extension to the FDSN specification.**",
				"operationId": "test",
				"produces": [
					"application/json"
				],
				"parameters": [ ],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/MessageResponse"
						}
					}
				}
			}
		}
	},
	"definitions": {
        "StationXMLResponse": {
            "xml": {
                "namespace": "http://www.fdsn.org/xml/station/1"
            }
       },
        "MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
       },
        "VersionResponse": {
            "type": "string",
            "example": "1.1.4"
       },
        "ErrorResponse": {
            "type": "string",
            "example": "Error CODE: SIMPLE ERROR DESCRIPTION ..."
       },
        "BodyRequestContent": {
            "type": "string",
            "example": "parameter1=value\nparameter2=value\nNET STA LOC CHA STARTTIME ENDTIME\nNET STA LOC CHA STARTTIME ENDTIME\nNET STA LOC CHA STARTTIME ENDTIME"
       }
	},
	"tags": [
		{
			"name": "fdsnws-station-1.1",
			"description": "",
			"externalDocs": {
				"description": "Find out more",
				"url": "http://www.fdsn.org/xml/station/"
			}
		},
		{
			"name": "fdsnws-station-1.1-ingv-extension",
			"description": ""
		}
	]

}